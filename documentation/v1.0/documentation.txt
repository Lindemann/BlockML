/*
    ____  __           __   __  _____ 
   / __ )/ /___  _____/ /__/  |/  / / 
  / __  / / __ \/ ___/ //_/ /|_/ / /  
 / /_/ / / /_/ / /__/ ,< / /  / / /___
/_____/_/\____/\___/_/|_/_/  /_/_____/

*/

title[BlockML Documentation]

toc[Contents]

sec[Basic usage][

The BlockML OSX app is basically a compiler for plain text files that are marked up with BlockML. To create these plain text files you will need a separate text editor. You can use whatever text editor you like, but it is highly recommended, to use a[http://macromates.com/download][TextMate] or a[http://www.sublimetext.com][Sublime Text], in combination with the c[BlockML.tmbundle], to get syntax highlighting. If you need help with the setup of TextMate or Sublime Text read: id[EDITOR]. Possible file extensions are c[.txt] and c[.blockml]. 

Once you have created a text file and want to compile it, drag and drop it onto the BlockML OSX app. You will notice that the app starts compiling immediately and opens a browser window with your actual output HTML.
img[info.svg]

The app has generated an output-folder next to your text file. This output-folder contains the HTML-file, the css-folder and an images-folder. Once the output-folder was generated, the css-folder and the images-folder don't get overwritten after recompilation. Use the images-folder to add images to your document and the css-folder to add custom CSS-files.

img[output.png]

]/* Basic usage */

sec[Syntax][

BlockML source text consist of plain text and markup elements. BlockML markup has always these structure:
img[structure.svg][500,]

At the beginning of an element stands a b[selector], which specifies the type of the element. The selector is as short as possible and often inspired by HTML tag names. 

The selector is followed by one or more b[blocks], depending on the type of the element. Blocks contain content and are not interchangeable. Some elements have one optional block at their end, for example the c[img] element with its optional size specification:

code[no-highlight][img\[cat.png\]
img\[cat.png\]\[300, 200\]] 

The b[content] has to be plain text in some blocks, while other blocks can contain plain text and further markup. For instance, the element for inline code has to contain only plain text like: c[c\[UITableView\]]. An instance for a markup element that could contain other markup is the section element: c[sec\[Overview\]\[An instance of c\[UITableView\]...\]]. You can think of blocks like of arguments for a method: a block on a certain position expects a certain input.

]/* Syntax */

sec[Markup elements][

sec[Paragraphs, line breaks and white space][

Paragraphs and line breaks work exactly like you would except. To create new paragraphs use 2 LFs (press 2 times Enter). To create line breaks use 1 LF.

code[markdown][This is a paragraph.↵
↵ 
This is a second paragraph.↵
This is a new line.]

Useless whitespace gets removed from the compiler.

code[markdown][↵ 
↵ 
↵ 
↵ 
The BlockML compiler removes useless white space like the LFs above.↵
••••Or this TAB in front of this sentence.]

]/* Paragraphs, line breaks and white space */

sec[Title][
This element creates a centered, clown sized heading and it sets the c[<title>] of your HTML document.

code[no-highlight][title\[Document Title\]]
html[<h1 style="padding: 0" id="title">Document Title</h1><p></p>]
img[title.png]

]/* Title */

sec[Headings][

There are headings from c[<h1>] - c[<h6>]. Headings don't get used for the Table of Contents (see id[TOC]).

code[no-highlight][h1\[Heading 1\]
h2\[Heading 2\]
h3\[Heading 3\]
h4\[Heading 4\]
h5\[Heading 5\]
h6\[Heading 6\]]

html[<h1>Heading 1</h1>
<h2>Heading 2</h2>
<h3>Heading 3</h3>
<h4>Heading 4</h4>
<h5>Heading 5</h5>
<h6>Heading 6</h6>]

]/* Headings */

sec[Document head][

Use c[head\[Content\]] to create a nice looking header for your document.
Allowed contents for this element are c[title] and c[h1]-c[h6].

code[no-highlight][head\[
title\[Document Title\]
h2\[Heading 2\]
h6\[Heading 6\]
\]]

html[<div class="document_head">
	<h1 id="title">Document Title</h1>
	<h2>Heading 2</h2>
	<h6>Heading 6</h6>
</div>]

]/* Document head */

sec[Sections][
Sections consist of a section heading and section content. 

code[vala][sec\[Heading\]\[Content\]]

These content can be text and every BlockML markup element, regardless that not every element makes sense in that context, for example c[title] and c[toc] elements.

Nest the sections to get a section hierarchy.

code[vala][sec\[Section Heading\]\[

sec\[SubSection Heading\]\[Content\]/* SubSection */

\]/* Section */]

html[<div class="sec" id="sec-1">
	<h1>1 Section Heading</h1>
	<div class="sec" id="sec-1.1">
		<h2>1.1 SubSection Heading</h2>
		<p>Content</p>
	</div>
</div>]

A complex example:

code[vala][sec\[Section Heading\]\[

sec\[SubSection Heading\]\[Content\]/* SubSection */

sec\[SubSection Heading\]\[

sec\[SubSubSection Heading\]\[Some other content\]/* SubSubSection */

\]/*SubSection*/

\]/* Section */

sec\[Section Heading\]\[Content too\]/*Section*/]

html[<div class="sec" id="sec-1">
	<h1>1 Section Heading</h1>
	<div class="sec" id="sec-1.1">
		<h2>1.1 SubSection Heading</h2>
		<p>Content</p>
	</div>
	<div class="sec" id="sec-1.2">
		<h2>1.2 SubSection Heading</h2>
		<div class="sec" id="sec-1.2.1">
			<h3>1.2.1 SubSubSection Heading</h3>
			<p>Some other content</p>
		</div>
	</div>
</div>
<div class="sec" id="sec-2">
	<h1>2 Section Heading</h1>
	<p>Content too</p>
</div>]

]/* Sections */

sec[Table of contents][
To get a Table of Contents use the c[toc] element. The Table of Contents gets assembled from the section headings.

code[no-highlight][toc\[TOC Title\]]

The Table of Contents for the section example above looks like this:

html[<div id="toc">
			<h1>TOC Title</h1>
			<ul>
				<li><span><span>1 Section Heading</span></span><a href="#sec-1"><span>\[⚐\]</span></a></li>
				<ul>
					<li><span><span>1.1 SubSection Heading</span></span><a href="#sec-1.1"><span>\[⚐\]</span></a></li>
				</ul>
				<ul>
					<li><span><span>1.2 SubSection Heading</span></span><a href="#sec-1.2"><span>\[⚐\]</span></a></li>
					<ul>
						<li><span><span>1.2.1 SubSubSection Heading</span></span><a href="#sec-1.2.1"><span>\[⚐\]</span></a></li>
					</ul>
				</ul>
			</ul>
			<ul>
				<li><span><span>2 Section Heading</span></span><a href="#sec-2"><span>\[⚐\]</span></a></li>
			</ul>
		</div>]

][TOC]/* Table of contents */

sec[Links][
A Link consists of an URL or of an URL and a link description.

code[no-highlight][a\[http://awwapps.com\]
a\[http://awwapps.com\]\[Description Text\]]

a[http://awwapps.com]
a[http://awwapps.com][Description Text]

]/* Links */

sec[Images][
To embed a local image into the document, copy that image into the auto generated images-folder, which is part of the output-folder. Then embed the image name without any path references.

img[embedImage.png]
code[no-highlight][img\[localImage.png\]]

img[dribbble.png]

You can also embed images from the internet, when you use their URL.

code[no-highlight][img\[http://internetImage.jpg\]]

If an image doesn't fit into the document, resize its width or its height or both with a second block: c[\[w, h\]]

m[Don't forget the comma!]

code[vala][/*adjust width and height*/
img\[localImage.png\]\[400, 300\]

/*adjust only the width*/
img\[localImage.png\]\[400,\]

/*adjust only the height*/
img\[localImage.png\]\[,300\]]

img[dribbble.png][400,]

]/* Images */

sec[Code listings][

Code listings uses the following syntax:

code[no-highlight][code\[Language\]\[Code\]]

BlockML makes use of a[http://highlightjs.org][Highlight.js] to provide syntax highlighting. In order to get proper highlighting you have to specify the programming language. You find a list of all available languages under: a[http://highlightjs.org/static/test.html]. Use c[no-highlight] if you don't want syntax highlighting.

code[no-highlight][code\[java\]\[System.out.println("Hello World!");\]]
code[java][System.out.println("Hello World!");]

m[You have to escape all square brackets in your code.] For more information read id[ESCAPE].

code[no-highlight][code\[objectivec\]\[self.scanner = \\\[Scanner scannerWithString:string\\\];
self.document = \\\[HTMLDocument new\\\];\]]

code[objectivec][self.scanner = \[Scanner scannerWithString:string\];
self.document = \[HTMLDocument new\];]

]/* Code listings */

sec[Math formulas][

Since BlockML uses a[http://www.mathjax.org][MathJax] for mathematics rendering you can use TeX/LaTeX or MathML syntax. 

Use c[math\[Formula\]] for larger equations that stay separated by themselves. The delimiters for TeX/LaTeX formulas are c[$$...$$] or c[\\\[...\\\]].

code[no-highlight][math\[$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$$\]]

math[$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}$$]

Or use c[im\[Formula\]] for inline mathematics. The TeX/LaTeX inline delimiters are c[$...$] or c[\(...\)].

code[no-highlight][Some inline mathematics: im\[$a \ne 0$\].]

Some inline mathematics: im[$a \ne 0$].

m[You have to escape all square brackets and backslashes.] For more information read id[ESCAPE].

]/* Math formulas */

sec[Tables][

The BlockML tables are very similar to a[http://www.w3schools.com/html/html_tables.asp][HTML tables]. There are the 4 markup elements to build a table:

ul[
- c[table\[\]]: creates a table
- c[tr\[\]]: creates a table row
- c[th\[\]]: creates a table header cell
- c[td\[\]]: creates a table data cell
]

To assemble a table create at first a c[table]-element:
code[no-highlight][table\[
\]]
Then add the rows:
code[no-highlight][table\[
tr\[\]
tr\[\]
\]]

Finally add c[th]-cells and c[td]-cells:

code[no-highlight][table\[
tr\[ th\[Header 1\] th\[Header 2\] \]
tr\[   td\[Data 1\]   td\[Data 2\] \]
\]]

table[
tr[ th[Header 1] th[Header 2] ]
tr[   td[Data 1]   td[Data 2] ]
]

Another simple example:

code[no-highlight][table\[
tr\[ th\[Header 1\] td\[Data 1\] \]
tr\[ th\[Header 2\] td\[Data 2\] \]
\]]

table[
tr[ th[Header 1] td[Data 1] ]
tr[ th[Header 2] td[Data 2] ]
]

Add a second block, to specify the number of rows or columns a c[td]-cell or a c[th]-cell should span. c[\[h:number\]] creates a horizontal span and c[\[v:number\]] creates a vertical span.

In this example c[th\[Header\]\[h:2\]] creates a horizontal span over 2 columns.

code[no-highlight][table\[
tr\[ 	  th\[Header\]\[h:2\] \]
tr\[ td\[Data 1\] td\[Data 2\] \]
\]]

table[
tr[ 	  th[Header][h:2] ]
tr[ td[Data 1] td[Data 2] ]
]

In this example c[th\[Header\]\[v:2\]] creates a vertical span over 2 rows.

code[no-highlight][table\[
tr\[ th\[Header\]\[v:2\] td\[Data 2\] \]
tr\[                 td\[Data 1\] \]
\]]

table[
tr[ th[Header][v:2] td[Data 2] ]
tr[ 				td[Data 1] ]
]

And in this example c[td\[Data 1\]\[h:2\]] creates a horizontal span over 2 columns.

code[no-highlight][table\[
tr\[ th\[Header 1\] th\[Header 2\] \]
tr\[           td\[Data 1\]\[h:2\] \]
\]]

table[
tr[ th[Header 1] th[Header 2] ]
tr[			  td[Data 1][h:2] ]
]

]/* Tables */

sec[Captions][

You should use captions directly after c[image]-, c[code]-, c[math]- or for example c[table]-elements. To create a caption use:
code[no-highlight][cap\[Type\]\[Description\]]

The first block specifies the type of the caption like: Listing, Fig., Figure, Table, Abbildung...The second block contains the description text to your c[image]-, c[code]-, c[math]- or c[table]-elements.

Captions of the same type get numbered consecutively. Captions of another type have their own consecutive numbering.

code[no-highlight][img\[image01.png\]\[300,\]
cap\[Fig.\]\[An image\]

code\[python\]\[print("Hello, world!")\]
cap\[Listing\]\[A code listing\]

img\[image02.png\]\[300,\]
cap\[Fig.\]\[Another image\]

code\[lisp\]\[(display "Hello, world!")\]
cap\[Listing\]\[Another code listing\]]

img[image01.png][300,]
cap[Fig.][An image]

code[python][print("Hello, world!")]
cap[Listing][A code listing]

img[image02.png][300,]
cap[Fig.][Another image]

code[lisp][(display "Hello, world!")]
cap[Listing][Another code listing]


]/* Captions */

sec[Lists][

sec[Unordered lists][

To create unordered lists use the c[ul\[\]]-element and add your list items to it. You can use dashes c[-] in front of items to emphasize the list structure, but you don't have to. The whitespace between dash and item is irrelevant.

You can nest your lists with other unordered or ordered lists. See an example in id[NLISTS].

code[no-highlight][ul\[
- item
- item
- item
\]]

ul[
- item
- item
- item
]

code[no-highlight][ul\[
item
-item
 - item
\]]

ul[
- item
- item
- item
]

]/* Unordered lists */

sec[Ordered lists][

Ordered lists work in the same way like unordered lists.

code[no-highlight][ol\[
- item
- item
- item
\]]

ol[
- item
- item
- item
]

code[no-highlight][ol\[
- item
- item
	ul\[
	- item
	- item
	- item
	\]
\]]
cap[Listing][Nested lists][NLISTS]

ol[
- item
- item
	ul[
	- item
	- item
	- item
	]
]

]/* Ordered lists */

]/* Lists */

sec[Footnotes][

For footnotes use c[fn\[Content\]]. All footnotes get added to the end of the document.

code[no-highlight][Some text with a footnote fn\[Content\].]

html[<p>Some text with a footnote <a id="fn-back-1" href="#fn-1"><sup>\[1\]</sup></a>.</p>
<div id="fn-1" class="en"><a href="#fn-back-1">\[1\]↵</a> Content</div>]


]/* Footnotes */

sec[Cross references][

Basically, cross references to captions, sections and bibliography items work almost the same. At first, specify an UID with c[id\[UID\]]. An UID is an unique string, which should only used for one reference.

Use the c[id] at this place in your text, where you want to mention the reference.

code[no-highlight][Some text with a reference id\[UNIQUE\].]

Read the following sections, to see how to connect a c[id] with your captions, sections or bibliography items. 

sec[References to captions][

Add a further block to your caption that contains the UID.

code[no-highlight][cap\[Type\]\[Description\]\[UID\]]

Here is an example with an image-caption. The UID is "IMG01":

code[no-highlight][img\[image01.png\]\[300,\]
cap\[Figure\]\[Image\]\[IMG01\]

Look at id\[IMG01\].]

img[image01.png][300,]
cap[Figure][Image][IMG01]

Look at id[IMG01].

]/* References to captions */

sec[References to sections][

Add a further block to your section that contains the UID.

code[no-highlight][sec\[Section Heading\]\[Content\]\[UID\]]

Here is an example with "SEC" as UID:

code[no-highlight][For more information see id\[SEC\].

sec\[Section Heading\]\[
Content
\]\[SEC\]]

html[<p>For more information see <a href="#sec-example">1 Section Heading</a>.</p>
<div class="sec" id="sec-example">
	<h1>1 Section Heading</h1>
	<p>Content</p>
</div>]

]/* References to sections */

sec[References to bibliography items][

bibliography items own by default a UID-block.

code[no-highlight][bib\[UID\]\[Publication Details\]]

Here is an example with "BIB01" as UID:

code[no-highlight][...(figure taken from id\[BIB01\])

bib\[BIB01\]\[Author, Title, Date\]]

...(figure taken from id[BIB01])
bib[BIB01][Author, Title, Date]

]/* References to bibliography items */

]/* Cross references */

sec[Bibliography][

To reference a publication use the following syntax:

code[no-highlight][bib\[UID\]\[Publication Details\]]

The UID is an unique string, which should only used for one bibliography item.

The publication details must become formatted by your self, in a a[http://sites.stat.psu.edu/~surajit/present/bib.htm#bibstyle][bibliography style] of your choice.

If two or more bibliography items follow each other, they get sorted alphabetically by their UIDs.

It might be best practice to collect all bibliography items in a separate "References"/"Bibliography" section or place them at the end of the document. The UID should not be longer then 6 characters and should contain a little bit context to the publication.

Some examples:

code[no-highlight][bib\[SKETCH\]\[Ivan Sutherland.  Sketchpad: A Man-Machine Graphical Communication System. MIT, 1963. a\[http://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-574.pdf\]\[PDF\]\]

bib\[DNA\]\[James Watson and Francis Crick. A Structure for Deoxyribose Nucleic Acid. Nature 171, 737-738, 1953. a\[http://www.nature.com/nature/dna50/watsoncrick.pdf\]\[PDF\]\]]

bib[SKETCH][Ivan Sutherland.  Sketchpad: A Man-Machine Graphical Communication System. MIT, 1963. a[http://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-574.pdf][PDF]]

bib[DNA][James Watson and Francis Crick. A Structure for Deoxyribose Nucleic Acid. Nature 171, 737-738, 1953. a[http://www.nature.com/nature/dna50/watsoncrick.pdf][PDF]]

]/* Bibliography */

sec[Quotes][
There are block quotations with or without a source.

code[no-highlight][q\[Quote\]\[Source\]]

q[Quote][Source]

code[no-highlight][q\[Quote\]]

q[Quote]

]/* Quotes */

sec[Text styles][

You can style your text as b[bold], i[italic], u[underlined], m[marked], s[strikethrough], subscript sub[text], superscript sup[text], and as c[inline code].

sec[Bold][

code[no-highlight][My b\[bold\] text.]
My b[bold] text.

]/* Bold */

sec[Italic][

code[no-highlight][My i\[italic\] text.]
My i[italic] text.

]/* Italic */

sec[Underlined][

code[no-highlight][My u\[underlined\] text.]
My u[underlined] text.

]/* Underlined */

sec[Marked][

code[no-highlight][My m\[marked\] text.]
My m[marked] text.

]/* Marked */

sec[Strikethrough][

code[no-highlight][My s\[strikethrough\] text.]
My s[strikethrough] text.

]/* Strikethrough */

sec[Subscript][

code[no-highlight][My subscript sub\[text\].]
My subscript sub[text].

]/* Subscript */

sec[Superscript][

code[no-highlight][My superscript sup\[text\].]
My superscript sup[text].

]/* Subscript */

sec[Inline Code][

code[no-highlight][My c\[inline code\].]
My c[inline code].

]/* Bold */


]/* Text styles */

sec[Embed HTML][

sec[Inline HTML][

Embed a[https://developer.mozilla.org/en-US/docs/HTML/Inline_elements][inline HTML] with c[ih\[HTML Code\]].

You can use inline HTML in the same way like inline BlockML elements.

Example:

code[no-highlight][text text ih\[<b>text</b>\] text.]

text text ih[<b>text</b>] text.

]/* Inline HTML */

sec[Block HTML][

Embed  a[https://developer.mozilla.org/en-US/docs/HTML/Block-level_elements][block-level HTML] with c[html\[HTML Code\]].

Example:

code[no-highlight][html\[<h1>Text</h1>\]]

html[<h1>Text</h1>]

]/* Block HTML */

]/* Embed HTML */

sec[Comments][

Out comment text with c[/*...*/].

code[vala][/* Comment */

/* Comment
over
multiple
lines */

Some text with a comment /* a\[http://awwapps.com\] */ inside.] 
]/* Comments */

/*sec[Page break][

The page break element c[pb\[\]] is only interesting if you want to convert your HTML to a PDF document (see id[HTML2PDF]).

You can use this element to force a page break...

]/* Page break */*/


]/* Markup elements */

sec[Block-level and inline-level markup][

Since BlockML has to be compilable to HTML, its feature set is closely linked to the capabilities of HTML. Like HTML BlockML has block level markup and inline markup.

h4[Inline-level markup]

Inline level markup can appear within plain text or some block-level elements.

c[a], c[fn], c[id], c[ih], c[im], c[c], c[b], c[u], c[i], c[s], c[m], c[sub], c[sup]

h4[Block-level markup]

Block-level elements may appear within a c[sec]-element or separated on a new line.

c[title], c[head], c[toc], c[sec], c[h1...h6], c[img], c[math], c[code], c[ul], c[ol], c[q], c[cap], c[bib], c[table], c[html]

]/* Block level and inline level markup */

sec[Escape of special characters][
Since square brackets c[\[\]] have a very special meaning in BlockML, it is necessary to escape them, if you want to use them in a non markup context. For example in code or mathematical formulas.

Here is a typical code example:
code[objectivec][\[self.window orderFront:self\];]

To escape the square brackets just set a backslash c[\\] in front of them.
code[objectivec][\\\[self.window orderFront:self\\\];]


The backslash c[\\] has a special meaning as escape symbol, you have to use two backslash c[\\\\] in order to print one. This can get a little bit messy in fancy TeX/LaTeX formulas.

For example, to use this TeX/LaTeX formula:
code[no-highlight][\\begin{aligned}
\\dot{x} & = \\sigma(y-x) \\\\
\\dot{y} & = \\rho x - y - xz \\\\
\\dot{z} & = -\\beta z + xy
\\end{aligned}]

You have to write this:
code[no-highlight][math\[\\\\begin{aligned}
\\\\dot{x} & = \\\\sigma(y-x) \\\\\\\\
\\\\dot{y} & = \\\\rho x - y - xz \\\\\\\\
\\\\dot{z} & = -\\\\beta z + xy
\\\\end{aligned}\]]

And get this result:
math[\\begin{aligned}
\\dot{x} & = \\sigma(y-x) \\\\
\\dot{y} & = \\rho x - y - xz \\\\
\\dot{z} & = -\\beta z + xy
\\end{aligned}]

But luckily the BlockML App helps to manage all the backslashes. Just insert your code or equation to the upper textfield and copy the text from the textfield below.

img[escape.png]

][ESCAPE]/* Escape of special characters */

sec[Error warnings][

If the BlockML compiler can't compile your source text you will get an error message. For instance, a forgotten closing square bracket will cause an error like this:

code[no-highlight][sec\[Section Heading\]\[

Content]

html[<div class="error" id="error-0">1 Error found!<br><a href="#error-1">Error with Section</a></div>
<div class="sec" id="sec-1">
	<h1>1 Section Heading</h1>
	<p>Content</p>
</div>
<div class="error" id="error-1">Error with Section</div>]

]/* Error warnings */

sec[Use custom CSS][

Just replace the default c[screen.css] and c[print.css] with your own stylesheets. But let the file names unchanged. 

code[html][<head>
	<link media="screen" href="css/screen.css" type="text/css" rel="stylesheet">
	<link media="print" href="css/print.css" type="text/css" rel="stylesheet">
</head>]

]/* Use custom CSS */

sec[Convert HTML documents to PDF][

CSS has theoretically the capability to render printable PDFs out of HTML pages. This functionality is called "Paged Media". Some Paged Media features are:

ul[
- set the size of pages and their margins
- set page breaks after certain elements or avoid them within an element
- create headers and footers
- set page numbers
- set cross-references
- generate a table of contents
]

Unfortunately, no browser supports this functions in their PDF export yet. But, there are some HTML to PDF converting tools like a[http://www.princexml.com][Prince], which implement the Paged Media specification. Prince offers a free license for non-commercial use and is perfect for converting BlockML documents to PDFs.

The c[print.css] is the place where you can set up all the Paged Media stuff.

This article is a good introduction to the topic: a[http://alistapart.com/article/boom][Printing a Book with CSS: Boom!]

][HTML2PDF]/* Convert HTML documents to PDF */

sec[Setup TextMate and Sublime Text][

sec[TextMate][


1. Download a[http://macromates.com/download][TextMate] and the a[http://blockml.awwapps.com/downloads/BlockML.zip][BlockML plugin]
2. Drag and drop the c[BlockML.tmbundle] onto the TextMate icon
img[TM_2.png]

3. Install it
img[TM_3.png]

4. Choose BlockML as language
img[TM_4_1.png]
img[TM_4_2.png]


Almost done! The following steps are optional.

5. In case you want to use the BlockML color schemes, drag and drop the c[BlockML Night.tmTheme]/c[BlockML Day.tmTheme] onto the TextMate icon
img[TM_5.png]

6. Add the c[tmTheme]-file to BlockML-bundle
img[TM_6.png]

7. Choose a color scheme
img[TM_7_1.png]

img[TM_7_2.png]
cap[Fig.][Night theme]

img[TM_7_3.png]
cap[Fig.][Day theme]

8. Activate Spell Checking
img[TM_8.png]

]/* TextMate */

sec[Sublime Text][

1. Download a[http://www.sublimetext.com][Sublime Text] and the a[http://blockml.awwapps.com/downloads/BlockML.zip][BlockML plugin]

2. Open Sublime Text's c[Packages]-folder
img[ST_2.png]

3. Move the downloaded c[BlockML]-folder into the c[Packages]-folder
img[ST_3.png]

4. Choose BlockML as language
img[ST_4_1.png]
img[ST_4_2.png]

5. Finally, you can choose a BlockML color scheme
img[ST_5_1.png]

img[ST_5_2.png]
cap[Fig.][Night theme]

img[ST_5_3.png]
cap[Fig.][Day theme]

]/* Sublime Text */

][EDITOR]/* Setup TextMate */
